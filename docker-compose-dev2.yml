version: "3.9"
services:
  
  postgres:
    container_name: postgres
    image: postgres:16
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../DatabasePOSTGRE:/docker-entrypoint-initdb.d
      - ../habrdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    # networks:
    #   - postgres
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_URI: "${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/habrdb?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
  
  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - ./redis-data:/data
    restart: unless-stopped

  telegram_connect:
    image: telegram_connect
    volumes:
      - ./strana_bot/telegramConnect:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/telegramConnect
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_TELEGRAM_CONNECT=${PORT_TELEGRAM_CONNECT}
      - TOKEN_BOT=${TOKEN_BOT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HANDLER_MESSAGE_URL=${HANDLER_MESSAGE_URL}:${PORT_HANDLER_MESSAGE}
    depends_on:
      - postgres

  instagram_connect:
    image: instagram_connect
    volumes:
      - ./strana_bot/instagramConnect:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/instagramConnect
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
     
      - INSTA_USER=${INSTA_USER}
      - INSTA_PASSWORD=${INSTA_PASSWORD}
      - HANDLER_MESSAGE_URL=${HANDLER_MESSAGE_URL}:${PORT_HANDLER_MESSAGE}
    depends_on:
      - postgres 
      
  handler_message:
    image: handler_message
    volumes:
      - ./strana_bot/handlerMessage:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/handlerMessage
    environment:
      - REDIS_URL=${REDIS_URL}
      
      # - POSTGRES_URL=${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_URL}:5432/${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - SENDER_MESSAGE_URL=${SENDER_MESSAGE_URL}:${PORT_SENDER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
      - PORT_HANDLER_MESSAGE=${PORT_HANDLER_MESSAGE}
      - API_STRANA_URL=${API_STRANA_URL}
    # ports:
    #   - 5003:5003

  generate_answer:
    image: generate_answer
    volumes:
      - ./strana_bot/generateAnswer:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/generateAnswer
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}

      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_DB_WORK_URL=${VECTOR_DB_WORK_URL}:${PORT_VECTOR_DB_WORK}
      - PORT_GENERATE_ANSWER=${PORT_GENERATE_ANSWER}
      - GRAPHQL=${GRAPHQL}
      - GIGA_CHAT_API_KEY=${GIGA_CHAT_API_KEY}

    # ports:
    #   - 5004:5004

  sender_message:
    image: sender_message
    volumes:
      - ./strana_bot/senderMessage:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/senderMessage
    environment:
      - TOKEN_BOT=${TOKEN_BOT} #telegram
      - INSTA_USER=${INSTA_USER}
      - INSTA_PASSWORD=${INSTA_PASSWORD}
      - PORT_SENDER_MESSAGE=${PORT_SENDER_MESSAGE}
  
  vector_db_work:
    image: vector_db_work
 #   volumes:
 #     - ./strana_bot/senderMessage:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./strana_bot/vectorDBwork
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_VECTOR_DB_WORK=${PORT_VECTOR_DB_WORK}
  # bash:
  #   image: bash
  #   tty: true


volumes:
  habrdb-data:
  pgadmin-data:
  portainer_data:
  redis-data:
    driver: local



# networks:
#   postgres:
#     driver: bridge