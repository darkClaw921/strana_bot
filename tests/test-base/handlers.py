from aiogram import types, F, Router, html, Bot
from aiogram.types import (Message, CallbackQuery,
                           InputFile, FSInputFile,
                            MessageEntity, InputMediaDocument,
                            InputMediaPhoto, InputMediaVideo, Document)
from aiogram.filters import Command, StateFilter
from aiogram.types.message import ContentType
from pprint import pprint
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any, Dict
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)



from dotenv import load_dotenv
import os
from chat import GPT
# import postgreWork 
# import chromaDBwork
from loguru import logger
from workRedis import *
# from calendarCreate import create_calendar
from datetime import datetime,timedelta
# from workGS import Sheet
import uuid
import time
from helper import prepare_table_for_text
# import speech_recognition as sr
# from promt import clasificatorPromt
from translation import transcript_audio
load_dotenv()
TOKEN = os.getenv('TOKEN')
# PAYMENTS_TOKEN = os.getenv('PAYMENTS_TOKEN')

gpt=GPT()


USER_EVENTS={}
# ids=postgreWork.get_all_user_ids()
# for id in ids:
#     USER_EVENTS[id]=[]
# textAllPosts=create_db()
# create_db2()
# model_index=gpt.load_search_indexes(textAllPosts)

class Form(StatesGroup):
    name = State()
    like_bots = State()
    language = State()
    spam = State()
    selectLang=State()
    selectPhone=State()
    selectTarif=State()
    inputTarget=State()
    selectTimePracktik=State()
    sendHelp=State()

    #–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    addEvent=State()
    inputEvent=State()
    inputDateEvent=State()
    inputTimeEvent=State()
    inputDescriptionEvent=State()
    inputDurationEvent=State()

    #–ü—Ä–∞–∫—Ç–∏–∫–∏
    addPracktik=State()
    inputPracktik=State()
    inputDatePracktik=State()
    inputTimePracktik=State()
    inputDescriptionPracktik=State()
    inputDurationPracktik=State()
    inputMediaPracktik=State()

# sql = Ydb()

router = Router()

bot = Bot(token=TOKEN,)
# sheet = Sheet('profzaboru-5f6f677a3cd8.json','–ê—Ñ–∏—à–∞ - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞')


# model_index=gpt.load_search_indexes('https://docs.google.com/document/d/1-1a_i9-k-0D8NF_s41YAD8fTeBH5fwyoGgzocWqx80o/edit?usp=sharing')
text=prepare_table_for_text()
model_index=gpt.load_search_indexes_text(text)

@router.message(Command("start"))
async def start_handler(msg: Message, state: FSMContext):
    userID=msg.chat.id
    # lang = await sql.get_lang(userID)
    # text = langList[lang]
    # nickname=msg.from_user.username
    # try: 
    #     postgreWork.add_new_user(userID,nickname)
    #     postgreWork.update_model(userID,'gpt')
    # except:
    #     1+0
    # # await state.set_state(Form.selectLang)
    # mess='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–∞–ª–∏, –ø—Ä–æ–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ —Å—Ö–æ–¥–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä(12.03 –π–æ–≥–∞) –∏–ª–∏ (–∑–∞–≤—Ç—Ä–∞ —Ç–∞–Ω—Ü—ã) '
#     mess="""–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –ë–∞–ª–∏üå¥ 
# –ú–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ üí´

# –ö–∞–∫–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
    mess='–ü—Ä–∏–≤–µ—Ç! –Ø - –∫–æ–º—å—é–Ω–∏—Ç–∏-–º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞–Ω—ã. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?'
    await msg.answer(mess)
    return 0

@router.message(Command("gpt1"))
async def gpt_handler(msg: Message, state: FSMContext):
    userID=msg.chat.id
    try: 
        postgreWork.update_model(userID,'gpt')
    except:
        1+0
    
    mess="""–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º GPT"""
    await msg.answer(mess)


@router.message(Command("assis1"))
async def assis_handler(msg: Message, state: FSMContext):
    userID=msg.chat.id
   
    postgreWork.update_model(userID,'assis')
    
    
    mess="""–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await msg.answer(mess)

@router.message(Command("clear"))
async def clear_handler(msg: Message, state: FSMContext):
    userID=msg.chat.id
    # lang = await sql.get_lang(userID)
    # text = langList[lang]
    
    
    clear_history(userID)
    # # await state.set_state(Form.selectLang)
    # mess='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–∞–ª–∏, –ø—Ä–æ–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ —Å—Ö–æ–¥–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä(12.03 –π–æ–≥–∞) –∏–ª–∏ (–∑–∞–≤—Ç—Ä–∞ —Ç–∞–Ω—Ü—ã) '
    mess='–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞'
    await msg.answer(mess)
    return 0

@router.message(Command("help1"))
async def help_handler(msg: Message, state: FSMContext):
    mess="/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/gpt - –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º GPT\n/assis - –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"
    await msg.answer(mess)
    return 0

@router.message(Command("reset1"))
async def help_handler(msg: Message, state: FSMContext):
    global model_index
    mess="–ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω"
    await msg.answer(mess)
    model_index=gpt.load_search_indexes('https://docs.google.com/document/d/1i77D_xI8x-Wsq11aIw-UBXgKMUbffeXwFSj1ckZogTI/edit?usp=sharing')
    await msg.answer('–≥–æ—Ç–æ–≤–æ')
    return 0

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±–µ–∫–æ–≤
@router.callback_query()
async def message_call(msg: CallbackQuery):
    pprint(msg.message.message_id)
    userID = msg.from_user.id
    await msg.answer()
    callData = msg.data
    # pprint(callData)
    logger.debug(f'{callData=}')

           
    return 0

language='ru_RU'
# r = sr.Recognizer()

def recognise(filename):
    with sr.AudioFile(filename) as source:
        audio_text = r.listen(source)
        try:
            text = r.recognize_google(audio_text,language=language)
            print('Converting audio transcripts into text ...')
            print(text)
            return text
        except:
            print('Sorry.. run again...')
            return "Sorry.. run again..."


@router.message(F.voice)
async def voice_processing(msg: Message, state: FSMContext):
    text = msg.text
    logger.debug(f'{text=}')
    filename = str(uuid.uuid4())
    # file_name_full="voice/"+filename+".ogg"
    file_name_full="voice/"+filename+".mp3"
    # file_name_full_converted="ready/"+filename+".wav"
    file_name_full_converted="ready/"+filename+".mp3"
    file_info = await bot.get_file(msg.voice.file_id)

    downloaded_file = await bot.download_file(file_info.file_path,destination=file_name_full)
    
    text=transcript_audio(file_name_full)
    msg1=msg
    await msg.reply(text)
    os.remove(file_name_full)
  
    
    msg1.__dict__['text'] = text
    pprint(msg1.__dict__)
    await message(msg1, state)  

def split_string_in_half(s):
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    mid = len(s) // 2
    # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ø–æ–ª–∞–º
    first_half = s[:mid]
    second_half = s[mid:]    
    return first_half, second_half



#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def message(msg: Message, state: FSMContext):
    global USER_EVENTS
    userID = msg.from_user.id
    messText = msg.text
    userName = msg.from_user.username 
    # pprint(msg.__dict__)
    # typeModel = postgreWork.get_model(userID)

    # if typeModel == 'assis':
    #     answer, token, tokenPrice=gpt.answer_assistant(messText,1,userID)
    #     dateNow = datetime.now().strftime("%d.%m.%Y")
    #     await msg.answer(answer)
    #     lst=[userName,dateNow, messText, answer, 'assis']
    #     postgreWork.add_statistick(userName=userName, text=messText, 
    #                                queryText=answer, token=token, 
    #                                tokenPrice=tokenPrice, theme='assis')
    #     sheet.insert_cell(data=lst)
    #     return 0

    

    add_message_to_history(msg.chat.id, 'user', msg.text)
    history = get_history(msg.chat.id)

    


    if len(history) > 10:
        clear_history(msg.chat.id)
        add_message_to_history(msg.chat.id, 'user', msg.text)
        history = get_history(msg.chat.id) 

    # pprint(msg.content_type)
    # chromaDBwork.query()
    print(messText)
    messagesList = [
       {"role": "user", "content": messText}
      ]
    # answer = gpt.answer(promtPreparePost,messagesList)
    

    date=datetime.now().strftime("%d.%m.%Y %A")
    # promt = f'–¢—ã –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç. –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è {date}.  –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:'
    # promt=gpt.load_prompt('https://docs.google.com/document/d/1oezrKsyGHXFie9BZxDLKVJwth8fZEcUq3jyZekL-oNo/edit?usp=sharing')
    # try:
    #     promt=gpt.load_prompt('https://docs.google.com/document/d/1J9F110b3UPABPeWd5pFg0mFoR_5s0CZYlMqR0SYF_wA/edit?usp=sharing')
    #     # promt2=gpt.load_prompt('https://docs.google.com/document/d/1i77D_xI8x-Wsq11aIw-UBXgKMUbffeXwFSj1ckZogTI/edit?usp=sharing')
    # except:
    #     promt=gpt.load_prompt('https://docs.google.com/document/d/1J9F110b3UPABPeWd5pFg0mFoR_5s0CZYlMqR0SYF_wA/edit?usp=sharing')
        # promt2=gpt.load_prompt('https://docs.google.com/document/d/1i77D_xI8x-Wsq11aIw-UBXgKMUbffeXwFSj1ckZogTI/edit?usp=sharing')
    # promt=promt+promt2
    # promt=promt.replace('[dateNow]',date)
    # promt2=
    # answer=gpt.answer_index(system=promt,topic=messText,history=history,search_index=model_index,verbose=False)
    # promt, promt2=split_string_in_half(promt)
    promt='–¢—ã –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –æ—Ç–≤–µ—á–∞–π –ø–æ–ª—å–∑–æ–≤–∞–ª–µ–ª—é —Ç–æ–ª—å–∫–æ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—á–ª–∏ –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–æ –ø–∏—à–∏ —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—à –¥–∏–∞–ª–æ–≥ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    try:
        answer, allToken, allTokenPrice, message_content = gpt.answer_index(promt, messText, history, model_index,temp=0.5, verbose=1)
        # answer = gpt.answer(promt, history, 1)
    except:
        history=get_history(userID)[-2:]
        answer, allToken, allTokenPrice, message_content = gpt.answer_index(promt, messText, history, model_index,temp=0.5, verbose=0)
        # answer = gpt.answer(promt, history, 1)
    # token=answer[1]
    # tokenPrice=answer[2]
    # answer=answer[0]
    
    # answer=gpt.answer_index()
    # pprint(answer)
    # exitText = answer.find('–ó–∞–∫–æ–Ω—á–∏–ª –æ–ø—Ä–æ—Å: 1')
    
    # answerTools=gpt.asnwer_tools(history=history)
    # answerTools=gpt.asnwer_tools(history=history)
    answerTools=[]
    # pprint(answerTools)
    # if answerTools != [45]:
    if answerTools == [45]:
        typeTool=answerTools[0]['type']
        if typeTool == 'conduct_dialogue':
            add_message_to_history(msg.chat.id, 'system', answer) 
            # await msg.answer(f"–¢–≤–æ–π ID: {msg.from_user.id}")
            dateNow = datetime.now().strftime("%d.%m.%Y")
            await msg.answer(answer)
        
            postgreWork.add_statistick(userName=userName, text=messText, 
                                    queryText=answer, token=token, 
                                    tokenPrice=tokenPrice, theme='gpt') 
            return 0
            
            

        promt1=gpt.load_prompt('https://docs.google.com/document/d/1IYhd2AHfcw7jwvOO1qbvgFAXVGnYq-ddpj_LH8_oe_A/edit?usp=sharing')
        asnwerTargets=gpt.answer(promt1, history, 1)
        # asnwerTargets=gpt.answer_yandex(promt1, history, 1)
        pprint(asnwerTargets)
        # location=answerTools[1].lower()
        location = answerTools[0]['output']['location']
        date = answerTools[0]['output']['date']
        theme = answerTools[0]['output']['theme']

        targets=asnwerTargets[0].split(',')
        targets=[i.strip() for i in targets]
        print(f'{targets=}')
        print(f'{location=}')
        
        postgreWork.add_statistick(userName=userName, text=messText,
                                   token=asnwerTargets[1], tokenPrice=asnwerTargets[2],
                                    targets=targets, theme='targets', queryText=messText)

        match answerTools[0]['output']:
            case {'location': str() as location}:
                location=location.lower()
                posts=postgreWork.get_posts_for_targets_and_location(targets, location)
                print(f'–µ—Å—Ç—å –ª–æ–∫–∞—Ü–∏—è')
            case {'location': None}:
                posts=postgreWork.get_posts_for_targets(targets)
            case _:
                print(f'–Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–∏')

         
        # if location != 'None' or location != '0' or location != '' or location is not None:
            
        # else: 
        

        create_db_for_user(str(userID), posts)
        
        distanceLimit=2 
        answerTools=answerTools[0]
        # date = answerTools['args']['date']
        try:
            date=date.strip()
            date=date.lower()
            date=find_patterns_date(date)
        except:
            date=None

        
        
        meta={'date':date}
        pprint(meta)
        if date == 'None' or date=='0' or date=='' or date is None:
            events=chromaDBwork.query(text=theme, result=5, collectionName=str(userID))
        else:
            events=chromaDBwork.query(text=theme, filter1=meta, result=5, collectionName=str(userID))
        events = chromaDBwork.prepare_query_chromadb(events)
        pprint(events)

        countEvent=0        
        # pprint(events)
        for event in events:
            try:
                print('++++++++++++++++++++++++++++++')
                print(event)

                distanseIS=event['distance']>=distanceLimit
                
            except Exception as e:
                print(e)
                answerText="""–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –Ω–µ –Ω–∞—à–µ–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–ºüòî 

–ú–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏. –ß—Ç–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –µ—â–µ –Ω–∞–π—Ç–∏?"""
                await msg.answer(answerText)  
                add_message_to_history(msg.chat.id, 'system', answerText)
                # distanseIS=False
                return 0
                # continue 
            if distanseIS:
                print('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –±–æ–ª—å—à–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º')
                continue
            try:
                event['text']=event['text'].replace('\xa0','')
                event['text']=event['text']+"\n"+str(event['distance'])+"\n"+event['themeSearch']
                event
                if event['id'] in USER_EVENTS[userID]:
                    continue
                else:
                    USER_EVENTS[userID].append(event['id'])
                await msg.answer(event['text'], parse_mode='HTML')

            except Exception as e:
                await msg.answer(str(e))

            countEvent+=1

        if countEvent==0:
            answerText="""–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –Ω–µ –Ω–∞—à–µ–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–ºüòî 

–ú–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏. –ß—Ç–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –µ—â–µ –Ω–∞–π—Ç–∏?"""
            await msg.answer(answerText)  
            add_message_to_history(msg.chat.id, 'system', answerText)
        chromaDBwork.delete_collection(str(userID))
        add_message_to_history(msg.chat.id, 'system', "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ 1") 
        return 0
   

    add_message_to_history(msg.chat.id, 'system', answer) 
    # await msg.answer(f"–¢–≤–æ–π ID: {msg.from_user.id}")
    dateNow = datetime.now().strftime("%d.%m.%Y")
    await msg.answer(answer, parse_mode='Markdown')
   

    # postgreWork.add_statistick(userName=userName, text=messText, 
    #                            queryText=answer, token=token, 
    #                            tokenPrice=tokenPrice, theme='gpt')
    
    # lst=[userName,dateNow, messText, answer, 'gpt']
    # sheet.insert_cell(data=lst)
    # await msg.send_copy(chat_id=400923372)
    # await bot.send_message(chat_id=400923372, text=f"–¢–≤–æ–π ID: {msg.from_user.id}")    


if __name__ == '__main__':
    # posts=postgreWork.get_posts()
    # date=datetime.now().strftime("%d.%m.%Y %A")
    # url='https://docs.google.com/document/d/1riRchaMaJC27ikxBx_02W2Z7GANDnFswzTUHy49qaqI/edit?usp=sharing'
    # promt=gpt.load_prompt(url)
    # promt=promt.replace('[dateNow]',date)

    # for post in posts:
        
    # # promt = f'–¢—ã –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç. –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è {date}.  –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:'
        
    #     # promtUrl=''
    #     messagesList = [
    #   {"role": "user", "content": post.text}
    #   ]
    #     answer=gpt.answer(promt,messagesList)[0]
    #     # print(answer)
    #     date, time, topic, location, cost, organizer, language, event, hashtags=convert_text_to_variables(answer)
    #     theme = topic
    #     location=[location.lower()]

    #     print(f'{theme=}')
    #     print(f'{location=}')
    #     # print(f'{post.__dict__=}')
    #     print(f'{hashtags=}')
    #     for i, a in enumerate(hashtags):
    #         hashtags[i]=a.lower()
            
    #     # 1/0
    #     postgreWork.update_post(post.id,theme=theme,location=location, targets=hashtags)




    # from aiogram import executor
    # executor.start_polling(router)
    pass